# Generated by Django 5.2.4 on 2025-08-13 14:07

import core.models
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Department name (e.g. 'French Department')", max_length=100)),
                ('language', models.CharField(help_text='Primary language taught in this department', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Optional department description')),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('qualification', models.TextField(help_text='Professional qualifications/certifications')),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('role', models.CharField(choices=[('LEARNER', 'Learner'), ('FORMATEUR', 'Formateur'), ('RESPONSABLE', 'Responsable'), ('SECRETAIRE', 'Secr√©taire'), ('ADMIN', 'Administrateur')], default='LEARNER', max_length=20)),
                ('education_level', models.CharField(blank=True, max_length=100)),
                ('profession', models.CharField(blank=True, max_length=100)),
                ('is_system_user', models.BooleanField(default=False, help_text='Can access Django admin interface')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('department', models.ForeignKey(blank=True, help_text='Associated department (for staff users)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.department')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('supplier_type', models.CharField(choices=[('INTERNAL', 'Internal Trainer'), ('EXTERNAL', 'External Trainer'), ('HOD', 'Head of Department')], default='INTERNAL', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='DRAFT', max_length=20)),
                ('objectives', models.TextField(help_text='Learning outcomes')),
                ('contents', models.TextField(help_text='Required textbooks/materials')),
                ('duration', models.DurationField(default=datetime.timedelta(days=1), help_text='Format: days hours:minutes:seconds')),
                ('expected_income', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('links', models.URLField(blank=True, help_text='External learning resources', null=True)),
                ('course_summary', models.FileField(blank=True, null=True, upload_to='course_summaries/%Y/%m/', validators=[core.models.validate_file_size])),
                ('submission_deadline', models.DateTimeField(blank=True, help_text='Last submission date for review', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='courses_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training Course',
                'verbose_name_plural': 'Training Courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.course')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.course')),
                ('team_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teammember')),
            ],
            options={
                'unique_together': {('course', 'team_member')},
            },
        ),
        migrations.AddField(
            model_name='course',
            name='team_members',
            field=models.ManyToManyField(blank=True, through='core.CourseTeam', to='core.teammember'),
        ),
    ]
